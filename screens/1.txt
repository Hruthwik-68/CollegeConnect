import React, { useState } from 'react';
import { View, Text, Image, StyleSheet, Button, TextInput, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Client, Databases } from 'appwrite';

const Solve = ({ route, navigation }) => {
  const { doubt } = route.params;
  const [isSolving, setIsSolving] = useState(false);
  const [solutionText, setSolutionText] = useState('');

  const handleSolve = async () => {
    setIsSolving(true);
  };
  const handleSubmit = async () => {
    try {
      const userUSN = await AsyncStorage.getItem('userUSN');
      if (!userUSN) {
        Alert.alert('Error', 'User USN not found');
        return;
      }
  
      const client = new Client();
      client.setEndpoint('https://cloud.appwrite.io/v1').setProject('6683ffc0003389ad9824');
  
      const databases = new Databases(client);
  
      const data = {
        postusn: doubt.usn,
        usn: userUSN,
        desc: solutionText,
        random: doubt.random,
      };
  
      console.log('Data to be submitted:', data); // Log the data object to verify
  
      await databases.createDocument('6689af2b0001f51c7dce', 'unique()', data);
  
      Alert.alert('Success', 'Solution submitted successfully');
      setSolutionText('');
      setIsSolving(false);
    } catch (error) {
      Alert.alert('Error', 'Failed to submit solution');
      console.error('Appwrite Error:', error);
    }
  };
  
  
  return (
    <View style={styles.container}>
      <Text style={styles.text}>USN: {doubt.usn}</Text>
      <Text style={styles.text}>Description: {doubt.desc}</Text>
      <Text style={styles.text}>Random: {doubt.random}</Text>
      {doubt.photo && <Image source={{ uri: doubt.photo }} style={styles.image} />}
      <Button title="Solve" onPress={handleSolve} />
      {isSolving && (
        <View style={styles.solutionContainer}>
          <TextInput
            style={styles.input}
            placeholder="Enter your solution"
            value={solutionText}
            onChangeText={setSolutionText}
          />
          <Button title="Submit" onPress={handleSubmit} />
        </View>
      )}
      <Button title="Go Back" onPress={() => navigation.goBack()} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
  },
  text: {
    fontSize: 18,
    marginBottom: 10,
  },
  image: {
    width: '100%',
    height: 200,
    borderRadius: 10,
  },
  solutionContainer: {
    width: '100%',
    marginVertical: 20,
    alignItems: 'center',
  },
  input: {
    width: '100%',
    padding: 10,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 10,
  },
});



#132742

#193355

#ffb5b6

export default Solve;
